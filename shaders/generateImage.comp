#version 450

#define PI 3.14159265358979323846264338327950288419716939937510


layout ( push_constant) uniform constants
{
    uint maxIndex, CurvesCount;
} pushConstants;

layout (std140, binding = 0) readonly uniform UBO 
{
    vec4 angles[400];
};

layout (std140, binding = 1) readonly buffer Image
{
    vec4 SDF[ ];
    //layout: distance, inside, root, curveIndex
};

layout (std140, binding = 2) writeonly buffer OUTIMAGE
{
    uint image[ ];
};

uint CustomMix(const in uint a, const in uint b, const in float c)
{
    const uint delta = b - a;
    if(c > 1.0)
        return b;
    return a + uint(delta * c);
}

uint insideColor(const in uint a)
{
    return 0xffffffff & (~a);
}

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

void main()
{ 
    uint index = gl_GlobalInvocationID.x;
    if(index < pushConstants.maxIndex)
    {
        const uint curveIndex = uint(SDF[index].w);
        const float inside = SDF[index].y;
        const float root = SDF[index].z;

        const uint color = CustomMix(0xff0000ff, 0xffff0000, float(curveIndex) / float(pushConstants.CurvesCount));
        image[index] = color;
        return;

        // uint color;
        // if(curveIndex % 3 == 0)
        //     color = 0xff00ff00;
        // else if(curveIndex % 3 == 1)
        //     color = 0xffff0000;
        // else
        //     color = 0xff0000ff;

        // if(inside < 0)
        //     color = insideColor(color);

        // image[index] = color | 0xff000000;
    }
}