#version 450

#define EPSILON 1e-05
#define MAXITERATION 200
#define PI 3.14159265358979323846264338327950288419716939937510

layout (binding = 0) uniform ParameterUBO {
    vec2 P_0, p1, p2, p3;
    vec4 bisector;
    int maxIndex, width, height, curveIndex;
} ubo;

layout(std140, binding = 1) readonly buffer CoefficientIn
{
    vec2 Coefficients[ ][4]; // buffer storing the coefficients of the polynomial.
};

layout(std140, binding = 2) buffer ParticleSSBOIn
{
    vec2 approximation[][3]; // buffer storing the current approximations.
};

vec2 mul(const vec2 z, const vec2 zp) // complex multiplication
{
    vec2 result;
    result.x = z.x * zp.x - z.y * zp.y;
    result.y = z.y * zp.x + z.x * zp.y;
    return result;
}

vec2 div(const vec2 z, const vec2 zp) // complex division
{
    float bottom = zp.x * zp.x + zp.y * zp.y;
    vec2 result = mul(z, vec2(zp.x, -zp.y));

    return result / bottom;
}

vec2 div(const float x, const vec2 zp)
{
    float bottom = zp.x * zp.x + zp.y * zp.y;
    return x * vec2(zp.x, -zp.y) / bottom;
}

vec2 f(const vec2 z, const in vec2[4] coeff) // compute polynom at z
{
    vec2 tmp = vec2(1, 0);
    vec2 result = coeff[0];
    for(uint i = 1; i < 4; i++)
    {
        tmp = mul(tmp, z);
        result += mul(coeff[i], tmp);

    }
    return result;
}

vec2 fp(const vec2 z, const in vec2[4] coeff) // compute derivate at z.
{
    vec2 tmp = vec2(1, 0);
    vec2 result = coeff[1];
    for(uint i = 2; i < 4; i++)
    {
        tmp = mul(tmp, z);
        result += mul(coeff[i] * float(i), tmp);
    }
    return result;
}


float absComplex(const vec2 z)
{
    return sqrt(z.x * z.x + z.y * z.y);
}

vec2 sumOfApproximation(const uint index, const in vec2[3] values)
{
    vec2 result = vec2(0);
    for(uint j = 0; j < 3; j++)
        if (j != index)
            result += div(vec2(1, 0), values[index] - values[j]) ;
    return result;
}

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

vec2 complexSQRT(const float x)
{
    if(x < 0)
        return vec2(0, sqrt(abs(x)));
    return vec2(sqrt(x), 0);
}


vec2 complexEXP(const float o)
{
    return vec2(cos(o), sin(o));
}

void main()
{
    uint index = gl_GlobalInvocationID.x;

    if(index < ubo.maxIndex)
    {
        float a = Coefficients[index][3].x;
        float b = Coefficients[index][2].x;
        float c = Coefficients[index][1].x;
        float d = Coefficients[index][0].x;
        
        b /= a;
        c /= a;
        d /= a;
        a = 1;

        const float p = (3.0 * c - b * b) / 3.0;
        const float q = (9.0 * c * b - 27.0 * d - 2. * b * b * b) / 27.0;

        const float R = q / 2.0;
	    const float Q = p / 3.0;

        const vec2 w3 = vec2(R, 0) + complexSQRT(R * R + Q * Q * Q);

        const float norm = absComplex(w3);
        const float r = pow(norm, 1.0/3.0);
        const float o = atan(w3.y, w3.x);

        for(uint i = 0; i < 3; i++)
        {
            const vec2 w = r * complexEXP((o + 2.0 * i * PI) / 3.0);
            const vec2 x = w - div(p, 3.0*w);
            approximation[index][i] = x - vec2(b / 3.0, 0);
        }
    }
}