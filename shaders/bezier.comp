#version 450

#define EPSILON 1e-05
#define MAXITERATION 200
#define PI 3.14159265358979323846264338327950288419716939937510
#define DEFAULT_VEC3 vec3(3.402823466E+38, 1, 0)

struct CurvesData
{
    uint PointsCount;
    vec4 centerAndTopRight;
    vec4 bisector;
    vec2 P_0, p1, p2, p3;
};

layout ( push_constant ) uniform constants
{
    uint CurvesCount, ScreenResolution, width, height;
} PushConstants;

layout (std140, binding = 0) readonly uniform UBO 
{
    CurvesData TMP[100];
};

layout (std140, binding = 1) writeonly buffer IMAGEOUT
{
    vec4 result[ ];
} OUTPUT;

vec3 linear(const vec2 point, const CurvesData curve);

vec3 quadratic(const vec2 point, const CurvesData curve, const float currentDistance);

vec3 cubic(const vec2 point, const CurvesData curve, const float currentDistance);

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

void main()
{
    const uint index = gl_GlobalInvocationID.x;

    // const uint IndexTest = 12;

    if(index < PushConstants.ScreenResolution)
    {
        const float x = index % PushConstants.width;
        const float y = (index - x) / float(PushConstants.width);
        const vec2 point = vec2((x + 0.5) / PushConstants.width, (y+0.5) / PushConstants.height);

        vec4 result = vec4(DEFAULT_VEC3, 0);
        for(uint i = 0; i < PushConstants.CurvesCount; i++)
        {
            CurvesData curve = TMP[i];

            vec3 candidate;
            if(curve.PointsCount == 2)
                candidate = linear(point, curve);
            else if (curve.PointsCount == 3)
                candidate = quadratic(point, curve, result.x);
            else /*if (curve.PointsCount == 4)*/ //if not need for font
                candidate = cubic(point, curve, result.x);

            if(candidate.x < result.x)
                result = vec4(candidate, i);
        }
        OUTPUT.result[index] = result;
    }
}

//https://iquilezles.org/articles/distfunctions2d/
//signed distance of a box!!!
float sdBox( in vec2 p, in vec2 b )
{
    vec2 d = abs(p)-b;
    return length(max(d,0.0)) + min(max(d.x,d.y), 0.0);
}

vec2 DBezier(const CurvesData curve)
{
    return curve.p1;
}

vec2 Bezier(const float t, const CurvesData curve)
{
    return curve.P_0 +
            t * curve.p1;
}

float crossN(const vec2 d, const vec2 v)
{
    return d.x * v.y - d.y * v.x;
}

float crossZ(const vec2 d, const vec2 v)
{
    const vec2 a = normalize(d); 
    const vec2 b = normalize(v);
    return (a.x * b.y - a.y * b.x);
}

vec3 linear(const vec2 point, const CurvesData curve)
{
    if(! (crossN(curve.bisector.xy, point - Bezier(0., curve)) <= 0. && crossN(curve.bisector.zw, point - Bezier(1., curve)) >= 0.))
        return DEFAULT_VEC3;          

    const vec2 p = point - curve.P_0;

    const float a = dot(curve.p1, curve.p1);
    const float b = -dot(curve.p1, p);

    const vec2 root = vec2(-b / a, 0);

    float real = root.x;
    real = clamp(real, 0.f, 1.f);
    const vec2 closestPoint = Bezier(real, curve);

    const float dis = distance(closestPoint, point);
    const float inside = crossZ(DBezier(curve), point - closestPoint);

    return vec3(dis, inside, real);
}


vec2 quadraticBezier(const float t, const CurvesData curve)
{
    return curve.P_0 +
    2.f * t * curve.p1 +
    t * t * curve.p2;
}

vec2 quadraticDBezier(const float t, const CurvesData curve)
{
    return 2.f * curve.p1 +
		    2.f * t * curve.p2;
}

vec2 complexSQRT(const float x)
{
    if(x < 0)
        return vec2(0, sqrt(abs(x)));
    return vec2(sqrt(x), 0);
}

dvec2 complexSQRT(const double x)
{
    if(x < 0)
        return dvec2(0.0, sqrt(abs(x)));
    return dvec2(sqrt(x), 0.0);
}

vec2 mul(const vec2 z, const vec2 zp) // complex multiplication
{
    vec2 result;
    result.x = z.x * zp.x - z.y * zp.y;
    result.y = z.y * zp.x + z.x * zp.y;
    return result;
}

vec2 div(const vec2 z, const vec2 zp) // complex division
{
    float bottom = zp.x * zp.x + zp.y * zp.y;
    vec2 result = mul(z, vec2(zp.x, -zp.y));

    return result / bottom;
}

vec2 div(const float x, const vec2 zp)
{
    float bottom = zp.x * zp.x + zp.y * zp.y;
    return float(x) * vec2(zp.x, -zp.y) / bottom;
}

vec2 complexEXP(const float o)
{
    return vec2(cos(o), sin(o));
}

vec2[3] startingPoints(const in float[4] coefficients)
{
    float a_3 = coefficients[3];
    float a_0 = coefficients[0];

    float offset = PI / (2.0 * 3.0);
    float angle = 2.0 * PI / 3.0;

    bool radiusZero = false;
    float radius;
    
    if(a_0 == 0.0)
    {
        radius = pow(abs(coefficients[1] / a_3), 0.5);
        angle = PI;
        offset = PI / (2.0 * 2.0);
        radiusZero = true;
    }
    else 
        radius = pow(abs(a_0 /a_3), 1./3.);
    
    vec2[3] roots;

    for(uint i = 0; i < 3; i++)
        roots[i] = radius * complexEXP(i * angle + offset);

    if(radiusZero)
        roots[0] = vec2(0);
    
    return roots;
}

vec2 f(const vec2 z, const in float[4] coeff) // compute polynom at z
{
    vec2 tmp = vec2(1, 0);
    vec2 result = vec2(coeff[0], 0.0);
    for(uint i = 1; i < 4; i++)
    {
        tmp = mul(tmp, z);
        result += coeff[i] * tmp;
    }
    return result;
}

vec2 fp(const vec2 z, const in float[4] coeff) // compute derivate at z.
{
    vec2 tmp = vec2(1, 0);
    vec2 result = vec2(coeff[1], 0.0);
    for(uint i = 2; i < 4; i++)
    {
        tmp = mul(tmp, z);
        result += coeff[i] * float(i) * tmp;
    }
    return result;
}

vec2 sumOfApproximation(const uint index, const in vec2[3] values)
{
    vec2 result = vec2(0);
    for(uint j = 0; j < 3; j++)
        if (j != index)
            result += div(vec2(1, 0), values[index] - values[j]) ;
    return result;
}

vec2[3] Aberth(const in float[4] coefficients)
{
    vec2[3] roots = startingPoints(coefficients);

    for(uint i = 0; i < MAXITERATION; i++)
    {
        const vec2[3] currentApproximation = roots;
        uint finish = 0;

        for(uint k = 0; k < 3; k++)
        {
            const vec2 z = currentApproximation[k];
            const vec2 p = f(z, coefficients);
            const vec2 pp = fp(z, coefficients);

            const vec2 POverPP = div(p, pp);
            const vec2 sum = sumOfApproximation(k, currentApproximation);
            const vec2 zPlusOne = z - div(POverPP, vec2(1, 0) - mul(POverPP, sum));

            roots[k] = zPlusOne;
            if(distance(z, zPlusOne) < EPSILON)
                finish++;
        }

        if(finish == 3)
            break;
    }

    return roots;
}

vec3 quadratic(const vec2 point, const CurvesData curve, const float currentDistance)
{
    
    if(sdBox(point - curve.centerAndTopRight.xy, curve.centerAndTopRight.zw) > currentDistance)
        return DEFAULT_VEC3;

    if(!(crossN(curve.bisector.xy, point - quadraticBezier(0., curve)) <= 0. && crossN(curve.bisector.zw, point - quadraticBezier(1., curve)) >= 0.))
        return DEFAULT_VEC3;


    const vec2 p = point - curve.P_0;
    
    float[4] coefficients;
    {

        const float a = dot(curve.p2, curve.p2);
        const float b = 3.0 * dot(curve.p1, curve.p2);
        const float c = 2.0 * dot(curve.p1, curve.p1) - dot(curve.p2, p);
        const float d = -dot(curve.p1, p);

        coefficients[0] = d;
        coefficients[1] = c;
        coefficients[2] = b;
        coefficients[3] = a;
    }

    float a = coefficients[3].x;
    float b = coefficients[2].x;
    float c = coefficients[1].x;
    float d = coefficients[0].x;

    b /= a;
    c /= a;
    d /= a;
    a = 1;

    const float s = (3.0 * c - b * b) / 3.0;
    const float q = (9.0 * c * b - 27.0 * d - 2. * b * b * b) / 27.0;

    const float R = q / 2.0;
    const float Q = s / 3.0;

    vec2[3] roots;
    vec2 w3 = vec2(R, 0) + complexSQRT(R * R + Q * Q * Q);
    
    {
        const float norm = length(w3);
        const float r = pow(norm, 1.0/3.0);
        const float o = atan(w3.y, w3.x);

        for(uint i = 0; i < 3; i++)
        {
            const vec2 w = r * complexEXP((o + 2.0 * i * PI) / 3.0);
            const vec2 x = w - div(s, 3.0 * w);
            roots[i] = x - vec2(b / 3.0, 0);

            if(i == 0)
            {
                const vec2 tmp = f(roots[0], coefficients);
                if(distance(tmp, vec2(0)) > EPSILON || isnan(roots[0].x))
                {
                    roots = Aberth(coefficients);
                    break;
                }
            }
        }
    }

    vec3 result = DEFAULT_VEC3;
    for(uint i = 0; i < 3; i++)
    {
        const vec2 root = roots[i];

        if(abs(root.y) < EPSILON)
        {
            float real = root.x;
            real = clamp(real, 0.f, 1.f);

            const vec2 closestPoint = quadraticBezier(real, curve);

            const float dis = distance(closestPoint, point);
            const float inside = crossZ(quadraticDBezier(real, curve), point - closestPoint);

            if(dis <= result.x)
                result = vec3(dis, inside, root.x);
        }
    }

    return result;
}

vec2 cubicBezier(const float t, const CurvesData curve)
{
    return curve.P_0 + 3.0 * t * curve.p1 +
        3.0 * t * t * curve.p2 + t * t * t * curve.p3;
}

vec2[5] startingPoints(const in float[6] coefficients)
{
    float a_5 = coefficients[5];
    float a_0 = coefficients[0];

    float offset = PI / (2.0 * 5.0);
    float angle = 2.0 * PI / 5.0;

    bool radiusZero = false;
    float radius;
    
    if(a_0 == 0)
    {
        radius = pow(abs(coefficients[1] / a_5), 0.25);
        angle = 2.0 * PI / 4.0;
        offset = PI / (2.0 * 4.0);
        radiusZero = true;
    }
    else 
        radius = pow(abs(a_0 / a_5), 1./5.);
    
    vec2[5] roots;

    for(uint i = 0; i < 5; i++)
        roots[i] = radius * complexEXP(i * angle + offset);

    if(radiusZero)
        roots[0] = vec2(0);
    
    return roots;
}

vec2 f(const vec2 z, const in float[6] coeff) // compute polynom at z
{
    vec2 tmp = vec2(1, 0);
    vec2 result = vec2(coeff[0], 0.0);
    for(uint i = 1; i < 6; i++)
    {
        tmp = mul(tmp, z);
        result += coeff[i] * tmp;

    }
    return result;
}

vec2 fp(const vec2 z, const in float[6] coeff) // compute derivate at z.
{
    vec2 tmp = vec2(1, 0);
    vec2 result = vec2(coeff[1], 0.0);
    for(uint i = 2; i < 6; i++)
    {
        tmp = mul(tmp, z);
        result += (coeff[i] * float(i)) * tmp;
    }
    return result;
}

vec2 sumOfApproximation(const uint index, const in vec2[5] values)
{
    vec2 result = vec2(0);
    for(uint j = 0; j < 6 - 1; j++)
        if (j != index)
            result += div(vec2(1, 0), values[index] - values[j]) ;
    return result;
}

vec2[5] Aberth(const float[6] coefficients)
{

    vec2[5] roots = startingPoints(coefficients);

    for(uint i = 0; i < MAXITERATION; i++)
    {
        const vec2[5] CurrentApproximation = roots;
        uint finish = 0;
        for(uint k = 0; k < 5; k++)
        {
            const vec2 z = CurrentApproximation[k];
            const vec2 p = f(z, coefficients);
            const vec2 pp = fp(z, coefficients);

            const vec2 POverPP = div(p, pp);
            const vec2 sum = sumOfApproximation(k, CurrentApproximation);
            const vec2 zPlusOne = z - div(POverPP, vec2(1, 0) - mul(POverPP, sum));
            roots[k] = zPlusOne;

            if(distance(z, zPlusOne) < EPSILON)
                finish++;
        }

        if(finish == 5)
            break;
    }

    return roots;
}

vec2 cubicDBezier(const float t, const CurvesData curve)
{
        return  3.0 * curve.p1
                + 6.0 * t * curve.p2 
                + 3.0 * t * t * curve.p3;
}



vec3 cubic(const vec2 point, const CurvesData curve, const float currentDistance)
{
    // const vec2 DirectionStart = cubicDBezier(0, curve);
    // const vec2 DirectionEnd = cubicDBezier(1, curve);
    // const vec2 CurveStart = cubicBezier(0., curve);
    // const vec2 CurveEnd = cubicBezier(1., curve);

    // if(!(crossN(-curve.bisector.xy, point - CurveStart) <= 0 && crossN(curve.bisector.zw, point - CurveEnd) >= 0))
    //     return DEFAULT_VEC3;

    if(sdBox(point - curve.centerAndTopRight.xy, curve.centerAndTopRight.zw) > currentDistance)
        return DEFAULT_VEC3;

    const vec2 p = point - curve.P_0;

    float[6] coefficients;
    {
        const float a = dot(curve.p3, curve.p3);
        const float b = 5.f * dot(curve.p2, curve.p3);
        const float c = 4.f * dot(curve.p1, curve.p3) + 6.0 * dot(curve.p2, curve.p2);

        const float d = 9.f * dot(curve.p1, curve.p2) - dot(curve.p3, p); // t^2
        const float e = 3.f * dot(curve.p1, curve.p1) - 2.0 * dot(curve.p2, p); // t
        const float f = -dot(curve.p1, p);

        coefficients[0] = f;
        coefficients[1] = e;
        coefficients[2] = d;
        coefficients[3] = c;
        coefficients[4] = b;
        coefficients[5] = a;
    }

    const vec2[5] roots = Aberth(coefficients);

    vec3 result = DEFAULT_VEC3;
    for(uint i = 0; i < 5; i++)
    {
        const vec2 root = roots[i];

        if(abs(root.y) < EPSILON)
        {
            float real = root.x;
            real = clamp(real, 0.f, 1.f);

            const vec2 closestPoint = cubicBezier(real, curve);

            const float dis = distance(closestPoint, point);
            const float inside = crossZ(cubicDBezier(real, curve), point - closestPoint);

            if(dis <= result.x)
                result = vec3(dis, inside, root.x);
        }
    }

    return result;
}